{#

This file is part of the Sonata package.

(c) Thomas Rabaix <thomas.rabaix@sonata-project.org>

For the full copyright and license information, please view the LICENSE
file that was distributed with this source code.

#}

{% extends base_template %}

{% block stylesheets %}
    {{ parent() }}
    <link type="text/css" rel="stylesheet" href="{{ asset('public/css/leaflet.css') }}"/>

{#
    <link type="text/css" rel="stylesheet" href="{{ asset('public/admin/map/index.css') }}"/>
#}

    <style type="text/css">
        #map {
            margin: 0 auto;
            padding: 0;
            height: 800px;
            width: 100%;
        }

        #description {
            font-family: Roboto;
            font-size: 15px;
            font-weight: 300;
        }

        #infowindow-content .title {
            font-weight: bold;
        }

        #infowindow-content {
            display: none;
        }

        #map #infowindow-content {
            display: inline;
        }

        .pac-card {
            margin: 10px 10px 0 0;
            border-radius: 2px 0 0 2px;
            box-sizing: border-box;
            -moz-box-sizing: border-box;
            outline: none;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
            background-color: #fff;
            font-family: Roboto;
        }

        #pac-container {
            padding-bottom: 12px;
            margin-right: 12px;
        }

        .pac-controls {
            display: inline-block;
            padding: 5px 11px;
        }

        .pac-controls label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }

        #pac-input {
            background-color: #fff;
            font-family: Roboto;
            font-size: 15px;
            font-weight: 300;
            margin-left: 12px;
            padding: 0 11px 0 13px;
            text-overflow: ellipsis;
            width: 400px;
        }

        #pac-input:focus {
            border-color: #4d90fe;
        }

        #title {
            color: #fff;
            background-color: #4d90fe;
            font-size: 25px;
            font-weight: 500;
            padding: 6px 12px;
        }
        #target {
            width: 345px;
        }
/*        .infoWindow{
            font-size: 14px;
            color: white !important;
            font-weight: bold !important;
            text-transform: uppercase;
        }

        .gm-style .gm-style-iw {
            top: 40px !important;
        }*/
        /*style the box*/
        /*
                .gm-style .gm-style-iw {
                    background-color: #3C61AD !important;
                    top: 12px !important;
                    left: 0 !important;
                    display: block !important;
                }

                !*style the p tag*!
                .gm-style .gm-style-iw #google-popup p{
                    padding: 0;
                }
        */


        /*style the arrow*/
        /*.gm-style div div div div div div div div {

            padding: 0;
            margin: 0;
            top: -12px;

            font-size: 12px;
        }


        .gm-style div div div div div div  {
            box-shadow: none !important;

        }
        .gm-style div div div div div div img[style*="left: -2px"] {
            display: none !important;

        }

        .gm-style div div div div{
            background: transparent !important;
            border: none !important;
        }
        .gm-style div div div div[style*="width: 9px"]{position: absolute;
            background-color: white !important;;
            border-color: rgb(255, 13, 0) !important;;
        }
        !*style the link*!
        .gm-style div div div div div div div div a {
            color: black;
        }*/

    </style>
{% endblock %}

{% block title %}
    {% if admin.id(object) is not null %}
        {{ "title_edit"|trans({'%name%': admin.toString(object)|truncate(15) }, 'SonataAdminBundle') }}
    {% else %}
        {{ "title_create"|trans({}, 'SonataAdminBundle') }}
    {% endif %}
{% endblock %}

{% block navbar_title %}
    {{ block('title') }}
{% endblock %}

{%- block actions -%}
    {% include 'SonataAdminBundle:CRUD:action_buttons.html.twig' %}
{%- endblock -%}

{% block tab_menu %}{{ knp_menu_render(admin.sidemenu(action), {'currentClass' : 'active', 'template': sonata_admin.adminPool.getTemplate('tab_menu_template')}, 'twig') }}{% endblock %}

{% use 'SonataAdminBundle:CRUD:base_edit_form.html.twig' with form as parentForm %}
{% import "SonataAdminBundle:CRUD:base_edit_form_macro.html.twig" as form_helper %}


{% block form %}

    {{ sonata_block_render_event('sonata.admin.edit.form.top', { 'admin': admin, 'object': object }) }}

    {% set url = admin.id(object) is not null ? 'edit' : 'create' %}

    {% if not admin.hasRoute(url) %}
        <div>
            {{ "form_not_available"|trans({}, "SonataAdminBundle") }}
        </div>
    {% else %}

        <form
                {% if sonata_admin.adminPool.getOption('form_type') == 'horizontal' %}class="form-horizontal"{% endif %}
                role="form"
                action="{% block sonata_form_action_url %}{{ admin.generateUrl(url, {'id': admin.id(object), 'uniqid': admin.uniqid, 'subclass': app.request.get('subclass')}) }}{% endblock %}"
                {% if form.vars.multipart %} enctype="multipart/form-data"{% endif %}
                method="POST"
                {% if not sonata_admin.adminPool.getOption('html5_validate') %}novalidate="novalidate"{% endif %}
                {% block sonata_form_attributes %}{% endblock %}
        >

            {{ include('SonataAdminBundle:Helper:render_form_dismissable_errors.html.twig') }}

            {% block sonata_pre_fieldsets %}
            <div class="row">
                {% endblock %}

                {% block sonata_tab_content %}
                    {% set has_tab = ((admin.formtabs|length == 1 and admin.formtabs|keys[0] != 'default') or admin.formtabs|length > 1 ) %}

                    <div class="col-md-12">

                        {% if has_tab %}
                            <div class="nav-tabs-custom">
                                <ul class="nav nav-tabs" role="tablist">
                                    {% for name, form_tab in admin.formtabs %}
                                        <li{% if loop.index == 1 %} class="active"{% endif %}><a
                                                    href="#tab_{{ admin.uniqid }}_{{ loop.index }}" data-toggle="tab"><i
                                                        class="fa fa-exclamation-circle has-errors hide"
                                                        aria-hidden="true"></i> {{ name|trans({}, form_tab.translation_domain ?: admin.translationDomain) }}
                                            </a></li>
                                    {% endfor %}
                                </ul>
                                <div class="tab-content">
                                    {% for code, form_tab in admin.formtabs %}
                                        <div class="tab-pane fade{% if loop.first %} in active{% endif %}"
                                             id="tab_{{ admin.uniqid }}_{{ loop.index }}">
                                            <div class="box-body  container-fluid">
                                                <div class="sonata-ba-collapsed-fields">
                                                    {% if form_tab.description != false %}
                                                        <p>{{ form_tab.description|raw }}</p>
                                                    {% endif %}

                                                    {{ form_helper.render_groups(admin, form, form_tab['groups'], has_tab) }}
                                                </div>
                                            </div>
                                        </div>
                                    {% endfor %}

                                </div>
                            </div>



                        {% else %}
                            {{ form_helper.render_groups(admin, form, admin.formtabs['default'].groups, has_tab) }}
                        {% endif %}



                        <div id="controls">
                            <div id="form">
                                {#<textarea type="text" name="wkt" id="wkt"></textarea>#}
                                <input type="reset" id="reset" value="Clear Map" onclick="clearTextArea();app.clearMap();" />
                            </div>
                        </div>
                        <div id="canvas"></div>
                        <div id="map"></div>
                        {% if object.coordinetes is defined %}
                            {{ object.coordinetes }}
                        {% endif %}

                    </div>
                {% endblock %}

                {% block sonata_post_fieldsets %}
            </div>
            {% endblock %}

            {{ form_rest(form) }}

            {% block formactions %}
                <div class="sonata-ba-form-actions well well-small form-actions">
                    {% block sonata_form_actions %}
                        {% if app.request.isxmlhttprequest %}
                            {% if admin.id(object) is not null %}
                                <button type="submit" class="btn btn-success" name="btn_update"><i class="fa fa-save"
                                                                                                   aria-hidden="true"></i> {{ 'btn_update'|trans({}, 'SonataAdminBundle') }}
                                </button>
                            {% else %}
                                <button type="submit" class="btn btn-success" name="btn_create"><i
                                            class="fa fa-plus-circle"
                                            aria-hidden="true"></i> {{ 'btn_create'|trans({}, 'SonataAdminBundle') }}
                                </button>
                            {% endif %}
                        {% else %}
                            {% if admin.supportsPreviewMode %}
                                <button class="btn btn-info persist-preview" name="btn_preview" type="submit">
                                    <i class="fa fa-eye" aria-hidden="true"></i>
                                    {{ 'btn_preview'|trans({}, 'SonataAdminBundle') }}
                                </button>
                            {% endif %}
                            {% if admin.id(object) is not null %}
                                <button type="submit" class="btn btn-success" name="btn_update_and_edit"><i
                                            class="fa fa-save"
                                            aria-hidden="true"></i> {{ 'btn_update_and_edit_again'|trans({}, 'SonataAdminBundle') }}
                                </button>

                                {% if admin.hasroute('list') and admin.isGranted('LIST') %}
                                    <button type="submit" class="btn btn-success" name="btn_update_and_list"><i
                                                class="fa fa-save"></i> <i class="fa fa-list"
                                                                           aria-hidden="true"></i> {{ 'btn_update_and_return_to_list'|trans({}, 'SonataAdminBundle') }}
                                    </button>
                                {% endif %}

                                {% if admin.hasroute('delete') and admin.isGranted('DELETE', object) %}
                                    {{ 'delete_or'|trans({}, 'SonataAdminBundle') }}
                                    <a class="btn btn-danger" href="{{ admin.generateObjectUrl('delete', object) }}"><i
                                                class="fa fa-minus-circle"
                                                aria-hidden="true"></i> {{ 'link_delete'|trans({}, 'SonataAdminBundle') }}
                                    </a>
                                {% endif %}

                                {% if admin.isAclEnabled() and admin.hasroute('acl') and admin.isGranted('MASTER', object) %}
                                    <a class="btn btn-info" href="{{ admin.generateObjectUrl('acl', object) }}"><i
                                                class="fa fa-users"
                                                aria-hidden="true"></i> {{ 'link_edit_acl'|trans({}, 'SonataAdminBundle') }}
                                    </a>
                                {% endif %}
                            {% else %}
                                {% if admin.hasroute('edit') and admin.isGranted('EDIT') %}
                                    <button class="btn btn-success" type="submit" name="btn_create_and_edit"><i
                                                class="fa fa-save"
                                                aria-hidden="true"></i> {{ 'btn_create_and_edit_again'|trans({}, 'SonataAdminBundle') }}
                                    </button>
                                {% endif %}
                                {% if admin.hasroute('list') and admin.isGranted('LIST') %}
                                    <button type="submit" class="btn btn-success" name="btn_create_and_list"><i
                                                class="fa fa-save"></i> <i class="fa fa-list"
                                                                           aria-hidden="true"></i> {{ 'btn_create_and_return_to_list'|trans({}, 'SonataAdminBundle') }}
                                    </button>
                                {% endif %}
                                <button class="btn btn-success" type="submit" name="btn_create_and_create"><i
                                            class="fa fa-plus-circle"
                                            aria-hidden="true"></i> {{ 'btn_create_and_create_a_new_one'|trans({}, 'SonataAdminBundle') }}
                                </button>
                            {% endif %}
                        {% endif %}
                    {% endblock %}
                </div>
            {% endblock formactions %}
        </form>
    {% endif %}

    {{ sonata_block_render_event('sonata.admin.edit.form.bottom', { 'admin': admin, 'object': object }) }}

{% endblock %}



{% block javascripts %}
    {{ parent() }}

    <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.3.1/leaflet.css" />

{#
    <script type="text/javascript" src="http://maps.google.com/maps/api/js?key=AIzaSyA5lLiS4QvX2BCRkrF8iIZeUDbDnvtuTFE&libraries=places&sensor=false"></script>
#}

    <script type="text/javascript" src="http://maps.google.com/maps/api/js?key=AIzaSyA5lLiS4QvX2BCRkrF8iIZeUDbDnvtuTFE&libraries=places&sensor=false&libraries=drawing"></script>


    <script src="{{ asset('public/admin/map/wicket.js') }}" type="text/javascript"></script>
    <script src="{{ asset('public/admin/map/wicket-gmap3.js') }}" type="text/javascript"></script>
{#
    <script src="{{ asset('public/admin/map/app.js') }}" type="text/javascript"></script>#}

    <script>
        $(window).load(function () {
            app.gmap = app.init();

        });


    </script>


    <script>

        function clearTextArea() {
            document.getElementsByClassName('zone-area')[0].innerHTML = '';
        }

        var polygonCenter = false;

        var app = (function () {
            return {
                features: [],
                /**
                 * Clears the map contents.
                 */
                clearMap: function () {
                    var i;

                    // Reset the remembered last string (so that we can clear the map,
                    //  paste the same string, and see it again)
                    document.getElementsByClassName('zone-area')[0].last = '';
                    for (i in this.features) {
                        if (this.features.hasOwnProperty(i)) {
                            this.features[i].setMap(null);
                        }
                    }
                    this.features.length = 0;
                },
                /**
                 * Clears the current contents of the textarea.
                 */
                clearText: function () {
                 },
                /**
                 * Maps the current contents of the textarea.
                 * @return  {Object}    Some sort of geometry object
                 */
                mapIt: function () {
                    var el, obj, wkt;

                    el = document.getElementsByClassName('zone-area')[0];
                    wkt = new Wkt.Wkt();

                    if (el.last === el.value) { // Remember the last string
                        return; // Do nothing if the WKT string hasn't changed
                    } else {
                        el.last = el.value;
                    }
                    wkt.read(el.value);
                    wkt.read(el.value.replace('\n', '').replace('\r', '').replace('\t', ''));

                    /*try { // Catch any malformed WKT strings
                        wkt.read(el.value);
                    } catch (e1) {
                        try {
                            wkt.read(el.value.replace('\n', '').replace('\r', '').replace('\t', ''));
                        } catch (e2) {
                            if (e2.name === 'WKTError') {
                                alert('Wicket could not understand the WKT string you entered. Check that you have parentheses balanced, and try removing tabs and newline characters.');
                                return;
                            }
                        }
                    }*/

                    obj = wkt.toObject(this.gmap.defaults); // Make an object

                    // Add listeners for overlay editing events
                    if (!Wkt.isArray(obj) && wkt.type !== 'point') {
                        // New vertex is inserted
                        google.maps.event.addListener(obj.getPath(), 'insert_at', function (n) {
                            app.updateText();
                        });
                        // Existing vertex is removed (insertion is undone)
                        google.maps.event.addListener(obj.getPath(), 'remove_at', function (n) {
                            app.updateText();
                        });
                        // Existing vertex is moved (set elsewhere)
                        google.maps.event.addListener(obj.getPath(), 'set_at', function (n) {
                            app.updateText();
                        });
                    } else {
                        if (obj.setEditable) {obj.setEditable(false);}
                    }

                    if (Wkt.isArray(obj)) { // Distinguish multigeometries (Arrays) from objects
                        for (i in obj) {
                            if (obj.hasOwnProperty(i) && !Wkt.isArray(obj[i])) {
                                obj[i].setMap(this.gmap);
                            }

                            if (wkt.type !== 'point') {
                                // New vertex is inserted
                                google.maps.event.addListener(obj[i].getPath(), 'insert_at', function (n) {
                                    app.updateTextPart();
                                });
                                // Existing vertex is removed (insertion is undone)
                                google.maps.event.addListener(obj[i].getPath(), 'remove_at', function (n) {
                                    app.updateTextPart();
                                });
                                // Existing vertex is moved (set elsewhere)
                                google.maps.event.addListener(obj[i].getPath(), 'set_at', function (n) {
                                    app.updateTextPart();
                                });
                            }
                        }

                        this.features = this.features.concat(obj);
                    } else {
                        obj.setMap(this.gmap); // Add it to the map
                        this.features.push(obj);
                    }

                    // Pan the map to the feature
                    if (obj.getBounds !== undefined && typeof obj.getBounds === 'function') {
                        // For objects that have defined bounds or a way to get them
                        this.gmap.fitBounds(obj.getBounds());


                    } else {
                        if (obj.getPath !== undefined && typeof obj.getPath === 'function') {
                            // For Polygons and Polylines
                            this.gmap.panTo(obj.getPath().getAt(0));


                        } else { // But points (Markers) are different
                            if (obj.getPosition !== undefined && typeof obj.getPosition === 'function') {
                                this.gmap.panTo(obj.getPosition());


                            }
                        }
                    }

                    return obj;
                },
                /**
                 * Updates the textarea based on the first available feature.
                 */
                updateText: function () {
                    var wkt = new Wkt.Wkt();
                    wkt.fromObject(this.features[0]);
                    document.getElementsByClassName('zone-area')[0].value = wkt.write();
                },
                updateTextPart: function () {
                    var i, w, v;

                    w = new Wkt.Wkt(this.features[0]);

                    i = 1;
                    while (i < this.features.length) {
                        v = new Wkt.Wkt(this.features[i]);
                        w.merge(v);
                        i += 1;
                    }

                    document.getElementsByClassName('zone-area')[0].value = w.write();
                },
                /**
                 * Formats the textarea contents for a URL.
                 * @param   checked {Boolean}   The check state of the associated checkbox
                 */
                urlify: function (checked) {
                    var wkt = new Wkt.Wkt();
                    wkt.read(document.getElementsByClassName('zone-area')[0].value);
                    wkt.delimiter = (checked) ? '+' : ' ';
                    document.getElementsByClassName('zone-area')[0].value = wkt.write();
                    return wkt;
                },
                /**
                 * Application entry point.
                 * @return  {<google.maps.Map>} The Google Maps API instance
                 */
                init: function () {
                    var gmap;



                    gmap = new google.maps.Map(document.getElementById('map'), {
                        center: new google.maps.LatLng(53.8552544, 27.6019759),
                        defaults: {
                            icon: 'red_dot.png',
                            shadow: 'dot_shadow.png',
                            editable: true,
                            strokeColor: '#ff0d00',
                            strokeOpacity: 0.5,
                            strokeWeight: 2,
                            fillColor: '#2fffa3',
                            fillOpacity: 0.5
                        },
                        disableDefaultUI: true,
                        mapTypeControl: true,
                        mapTypeId: google.maps.MapTypeId.HYBRID,
                        mapTypeControlOptions: {
                            position: google.maps.ControlPosition.TOP_LEFT,
                            style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
                        },
                        panControl: false,
                        streetViewControl: false,
                        zoom: 15,
                        zoomControl: true,
                        zoomControlOptions: {
                            position: google.maps.ControlPosition.LEFT_TOP,
                            style: google.maps.ZoomControlStyle.SMALL
                        }
                    });


                    {% set zones = map_service.zoneList %}

                    {% for entity in zones %}
                    var triangleCoords = [

                        {% for latlng in entity.area %}
                        {lat: parseFloat('{{ latlng.lat }}'), lng: parseFloat('{{ latlng.lng }}')},
                        {% endfor %}
                    ];


                    var mapLabelLatMax = 0;
                    var mapLabelLatMin = 1000;
                    var mapLabelLngMax = 0;
                    var mapLabelLngMin = 1000;

                    for (var i = 0; i < triangleCoords.length; i++){
                        if (triangleCoords[i].lat < mapLabelLatMin){
                            mapLabelLatMin = triangleCoords[i].lat;
                        }

                        if (triangleCoords[i].lat > mapLabelLatMax){
                            mapLabelLatMax = triangleCoords[i].lat;
                        }

                        if (triangleCoords[i].lng < mapLabelLngMin){
                            mapLabelLngMin = triangleCoords[i].lng;
                        }
                        if (triangleCoords[i].lng > mapLabelLngMax){
                            mapLabelLngMax = triangleCoords[i].lng;
                        }

                    }


                    var mapLabelLat = mapLabelLatMin + ((mapLabelLatMax - mapLabelLatMin) / 2);// (mapLabelLatMax + mapLabelLatMin) / 2;
                    var mapLabelLng = mapLabelLngMin + ((mapLabelLngMax - mapLabelLngMin) / 2);//(mapLabelLngMax + mapLabelLngMin) / 2;




                    // Construct the polygon.
                    var bermudaTriangle = new google.maps.Polygon({

                        paths: triangleCoords,
                        fillColor: '#a80319',
                        fillOpacity: 0.4,
                        title : '{{ entity.title }}',
                        capacity: '{{ entity.capacity }}',
                        strokeColor: '#fff505',
                        strokeOpacity: 0.9,
                        strokeWeight: 1
                    });

                    bermudaTriangle.setMap(gmap);
                    bermudaTriangle.addListener('click', showZone{{ entity.id }});
                    function showZone{{ entity.id }}(event) {
                        gmap.setCenter(event.latLng);
                        gmap.setZoom(17);
                    }

                    var contentString = '<a onclick="showZoneA(' + mapLabelLat +', ' + mapLabelLng + ')" class="infoWindow">'+ '{{ entity.title }}'  + '</a>';


                    if (mapLabelLatMax) {


                        var markers = new google.maps.Marker({
                            position: new google.maps.LatLng(mapLabelLat, mapLabelLng),
                            label: {
                                text: '{{ entity.title }}',
                                color: "white",
                                fontSize : "22px"
                            },
                            link: contentString,
                            icon: {
                                path: google.maps.SymbolPath.CIRCLE,
                                scale: 0
                            }
                        });

                        markers.setMap(gmap);

                        /*var infowindow = new google.maps.InfoWindow({
                            content: contentString,
                            position: new google.maps.LatLng(mapLabelLat, mapLabelLng)
                        }).open(gmap);
*/
                    }

                    {% endfor %}


                    google.maps.event.addListener(gmap, 'tilesloaded', function () {
                        if (!this.loaded) {
                            this.loaded = true;
                            // NOTE: We start with a MULTIPOLYGON; these aren't easily deconstructed, so we won't set this object to be editable in this example

                            {% if object.area is defined %}
                            document.getElementsByClassName('zone-area')[0].value = '{{ object.area }}';

                            if ('{{ object.area }}'.length > 10){
                                gmap.zoom = 17;
                            }

                            {% else %}
                            document.getElementsByClassName('zone-area')[0].value = '';
                            {% endif %}
                            app.mapIt();
                        }
                    });


                    gmap.drawingManager = new google.maps.drawing.DrawingManager({
                        drawingControlOptions: {
                            position: google.maps.ControlPosition.TOP_CENTER,
                            drawingModes: [
                                google.maps.drawing.OverlayType.POLYGON,

                            ]
                        },
                        markerOptions: gmap.defaults,
                        polygonOptions: gmap.defaults,
                        polylineOptions: gmap.defaults,
                        rectangleOptions: gmap.defaults
                    });
                    gmap.drawingManager.setMap(gmap);

                    google.maps.event.addListener(gmap.drawingManager, 'overlaycomplete', function (event) {
                        var wkt;

                        app.clearText();
                        app.clearMap();

                        // Set the drawing mode to "pan" (the hand) so users can immediately edit
                        this.setDrawingMode(null);

                        // Polygon drawn
                        if (event.type === google.maps.drawing.OverlayType.POLYGON || event.type === google.maps.drawing.OverlayType.POLYLINE) {
                            // New vertex is inserted
                            google.maps.event.addListener(event.overlay.getPath(), 'insert_at', function (n) {
                                app.updateText();
                            });

                            // Existing vertex is removed (insertion is undone)
                            google.maps.event.addListener(event.overlay.getPath(), 'remove_at', function (n) {
                                app.updateText();
                            });

                            // Existing vertex is moved (set elsewhere)
                            google.maps.event.addListener(event.overlay.getPath(), 'set_at', function (n) {
                                app.updateText();
                            });
                        } else if (event.type === google.maps.drawing.OverlayType.RECTANGLE) { // Rectangle drawn
                            // Listen for the 'bounds_changed' event and update the geometry
                            google.maps.event.addListener(event.overlay, 'bounds_changed', function () {
                                app.updateText();
                            });
                        }

                        app.features.push(event.overlay);
                        wkt = new Wkt.Wkt();
                        wkt.fromObject(event.overlay);
                        document.getElementsByClassName('zone-area')[0].value = wkt.write();
                    });


                    return gmap;
                }


            };


        }()); // Execute immediately
        function showZoneA(lat, lng) {
            map.setCenter(new google.maps.LatLng(lat, lng));
            map.setZoom(17);
        }

    </script>


    <script>
        $(document).ready(function ($) {

            var p = $('.infoWindow');

            console.log(p.length);
            console.log(p.prop("tagName") + ' Akim');

        });
    </script>
{% endblock %}